<section>
<h2 id="sets">Sets</h2>

<p class="note">Note: Yes, the names <code><a>DOMTokenList</a></code> and <code><a>DOMSettableTokenList</a></code> are unfortunate legacy mishaps.


<h3 id="sets-interface-domtokenlist">Interface <code><a>DOMTokenList</a></code></h3>

<pre class='idl'>
interface DOMTokenList {
  readonly attribute unsigned long length;
  getter DOMString? item(unsigned long index);
  boolean contains(DOMString token);
  void add(DOMString... tokens);
  void remove(DOMString... tokens);
  boolean toggle(DOMString token, optional boolean force);
  stringifier;
  iterable<DOMString>;
};
</pre>

<p>A <code><a>DOMTokenList</a></code> object has an associated ordered set of <dfn>tokens</dfn>, which is initially empty.

<p>A <code><a>DOMTokenList</a></code> object also has an associated <a>element</a> and an <a>attribute</a>'s <a>local name</a>.

<p>A <code><a>DOMTokenList</a></code> object's <dfn>update steps</dfn> are:

<ol>
 <li><p>If there is no associated <a>attribute</a> (when the object is a <code><a>DOMSettableTokenList</a></code>), terminate these steps.

 <li><p><a>Set an attribute value</a> for the associated <a>element</a> using associated <a>attribute</a>'s <a>local name</a> and the result of running the <a>ordered set serializer</a> for <a>tokens</a>.
</ol>

<dl>
 <dt><code><var>tokenlist</var> . <a href="#domtokenlist-length">length</a></code> <dd><p>Returns the number of tokens.

 <dt><code><var>tokenlist</var> . <a>item</a>(<var>index</var>)</code> <dt><code><var>tokenlist</var>[<var>index</var>]</code> <dd><p>Returns the token with index <var>index</var>.

 <dt><code><var>tokenlist</var> . <a>contains</a>(<var>token</var>)</code>
 <dd>
  <p>Returns true if <var>token</var> is present, and false otherwise. <p>Throws a "<code><a>SyntaxError</a></code>" exception if <var>token</var> is the empty string. <p>Throws an "<code><a>InvalidCharacterError</a></code>" exception if <var>token</var> contains any <a>ASCII whitespace</a>.

 <dt><code><var>tokenlist</var> . <a>add</a>(<var>tokens</var>…)</code>
 <dd>
  <p>Adds all arguments passed, except those already present.
  <p>Throws a "<code><a>SyntaxError</a></code>" exception if one of the arguments is the empty string.
  <p>Throws an "<code><a>InvalidCharacterError</a></code>" exception if one of the arguments contains any <a>ASCII whitespace</a>.

 <dt><code><var>tokenlist</var> . <a>remove</a>(<var>tokens</var>…)</code>
 <dd>
  <p>Removes arguments passed, if they are present.
  <p>Throws a "<code><a>SyntaxError</a></code>" exception if one of the arguments is the empty string.
  <p>Throws an "<code><a>InvalidCharacterError</a></code>" exception if one of the arguments contains any <a>ASCII whitespace</a>.

 <dt><code><var>tokenlist</var> . <a>toggle</a>(<var>token</var> [, <var>force</var>])</code>
 <dd>
  <p>If <var>force</var> is not given, "toggles" <var>token</var>, removing it if it's present and adding it if it's not. If <var>force</var> is true, adds <var>token</var> (same as <code><a>add()</a></code>).  If <var>force</var> is false, removes <var>token</var> (same as <code><a>remove()</a></code>). <p>Returns true if <var>token</var> is now present, and false otherwise.
  <p>Throws a "<code><a>SyntaxError</a></code>" exception if <var>token</var> is empty.
  <p>Throws an "<code><a>InvalidCharacterError</a></code>" exception if <var>token</var> contains any spaces.
</dl>

<div>

<p>The <dfn id="domtokenlist-length" for="domtokenlist"><code>length</code></dfn>attribute must return the number of tokens in the <a>tokens</a>.

<p>The object's <a>supported property indices</a> are the numbers in the range zero to the number of tokens in <a>tokens</a> minus one, unless <a>tokens</a> is  empty, in which case there are no <a>supported property indices</a>.

<p>The <dfn id="domtokenlist-item" for="domtokenlist"><code>item(<var>index</var>)</code></dfn> method must run these steps:

<ol>
 <li><p>If <var>index</var> is equal to or greater than the number of tokens in <a>tokens</a>, return null.

 <li><p>Return the <var>index</var>th token in <a>tokens</a>.
</ol>

<p>The
<dfn id="set-contains-func" for="set"><code>contains(<var>token</var>)</code></dfn> method must run these steps:

<ol>
 <li><p>If <var>token</var> is the empty string, then <a>throw</a> a "<code><a>SyntaxError</a></code>" exception.

 <li><p>If <var>token</var> contains any <a>ASCII whitespace</a>, then <a>throw</a> an "<code><a>InvalidCharacterError</a></code>" exception.

 <li><p>Return true if <var>token</var> is in <a>tokens</a>, and false otherwise.
</ol>

<p>The <dfn><code>add(<var>tokens</var>…)</code></dfn> method must run these steps:

<ol>
 <li><p>If one of <var>tokens</var> is the empty string, <a>throw</a> a "<code><a>SyntaxError</a></code>" exception.

 <li><p>If one of <var>tokens</var> contains any <a>ASCII whitespace</a>, then <a>throw</a> an "<code><a>InvalidCharacterError</a></code>" exception.

 <li><p>For each <var>token</var> in <var>tokens</var>, in given order, that is not in <a>tokens</a>, append <var>token</var> to <a>tokens</a>.

 <li><p>Run the <a>update steps</a>.
</ol>

<p>The <dfn id="set-remove-func" for="set"><code>remove(<var>tokens</var>…)</code></dfn> method must run these steps:

<ol>
 <li><p>If one of <var>tokens</var> is the empty string, <a>throw</a> a "<code><a>SyntaxError</a></code>" exception.

 <li><p>If one of <var>tokens</var> contains any <a>ASCII whitespace</a>, then <a>throw</a> an "<code><a>InvalidCharacterError</a></code>" exception.

 <li><p>For each <var>token</var> in <var>tokens</var>, remove <var>token</var> from <a>tokens</a>.

 <li><p>Run the <a>update steps</a>.
</ol>

<p>The <dfn><code>toggle(<var>token</var>, <var>force</var>)</code></dfn>
method must run these steps:

<ol>
 <li><p>If <var>token</var> is the empty string, <a>throw</a> a "<code><a>SyntaxError</a></code>" exception.

 <li><p>If <var>token</var> contains any <a>ASCII whitespace</a>, <a>throw</a> an "<code><a>InvalidCharacterError</a></code>" exception.

 <li>
  <p>If <var>token</var> is in <a>tokens</a>, run these substeps:

  <ol>
   <li><p>If <var>force</var> is either not passed or is false, then remove <var>token</var> from <a>tokens</a>, run the <a>update steps</a>, and return false.

   <li><p>Otherwise, return true.
  </ol>

 <li>
  <p>Otherwise, run these substeps:

  <ol>
   <li><p>If <var>force</var> is passed and is false, return false.

   <li><p>Otherwise, append <var>token</var> to <a>tokens</a>, run the <a>update steps</a>, and return true.
  </ol>
</ol>

<p>The <dfn id="domtokenlist-stringifier" for="domtokenlist">stringifier</dfn> must return the result of the <a>ordered set serializer</a> for <a>tokens</a>.

</div>

<h3 id="interface-domsettabletokenlist">Interface <code><a>DOMSettableTokenList</a></code></h3>

<pre class='idl'>
interface DOMSettableTokenList : DOMTokenList {
            attribute DOMString value;
};
</pre>

<p>A <code><a>DOMSettableTokenList</a></code> object is equivalent to a <code><a>DOMTokenList</a></code> object without an associated <a>attribute</a>.

<dl>
 <dt><code><var>tokenlist</var> . <a href="#domsettabletokenlist-value">value</a></code>
 <dd>
  <p>Returns the associated set as string.
  <p>Can be set, to change the associated set via a string.
</dl>

<div>

<p>The <dfn id="domsettabletokenlist-value"><code>value</code></dfn> attribute must return the result of the <a>ordered set serializer</a> for <a>tokens</a>.

<p>Setting the <code><a href="#domsettabletokenlist-value">value</a></code> attribute must run the <a>ordered set parser</a> for the given value and set <a>tokens</a> to the result.

</div>

</section>
