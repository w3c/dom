<section>
<h2 id="traversal">Traversal</h2>

<code><a>NodeIterator</a></code> and <code><a>TreeWalker</a></code> objects can be used to filter and traverse <a>node</a> <a>trees</a>.

Each <code><a>NodeIterator</a></code> and <code><a>TreeWalker</a></code> object also has an associated <dfn id="traversal-root" for="traversal">root</dfn> <a>node</a>, <dfn id="traversal-whattoshow" for="traversal">whatToShow</dfn> bitmask, and <dfn id="traversal-filter" for="traversal">filter</dfn> callback.

To <dfn dfn id="node-filter" for="node">filter</dfn> <var>node</var> run these steps:

<ol>
  1. Let <var>n</var> be <var>node</var>'s <code><a>nodeType</a></code> attribute value minus 1. 

  2. If the <var>n</var><sup>th</sup> bit (where 0 is the least significant bit) of <a href="#traversal-whattoshow">whatToShow</a> is not set, return <code><a>FILTER_SKIP</a></code>.

  3. If <a href="#traversal-filter">filter</a> is null, return <code><a>FILTER_ACCEPT</a></code>.

  4. Let <var>result</var> be the return value of calling <a href="#traversal-filter">filter</a>'s <code>acceptNode</code> with <var>node</var> as argument. Rethrow any exceptions.

  3. Return <var>result</var>.

</ol>

<h3 id="traversal-interface-nodeiterator">Interface <code><a>NodeIterator</a></code></h3>

<pre class='idl'>
[Exposed=Window]
interface NodeIterator {
  [SameObject] readonly attribute Node root;
  readonly attribute Node referenceNode;
  readonly attribute boolean pointerBeforeReferenceNode;
  readonly attribute unsigned long whatToShow;
  readonly attribute NodeFilter? filter;

  Node? nextNode();
  Node? previousNode();

  void detach();
};
</pre>

<p class="note">Note: <code><a>NodeIterator</a></code> objects can be created using the <code><a>createNodeIterator()</a></code> method.

<p>Each <code><a>NodeIterator</a></code> object has an associated <dfn>iterator collection</dfn>, which is a <a>collection</a> rooted at <a href="#traversal-root">root</a>, whose filter matches any <a>node</a>.

<p class="note">Note: As mentioned earlier <code><a>NodeIterator</a></code> objects have an associated <a href="#traversal-root">root</a> <a>node</a>, <a href="#traversal-whattoshow">whatToShow</a> bitmask, and <a href="#traversal-filter">filter</a> callback as well.

The <dfn><code>NodeIterator</code> pre-removing steps</dfn> given a <var>nodeIterator</var> and <var>toBeRemovedNode</var>, are as followings:

<ol>
 <li><p>If <var>toBeRemovedNode</var> is not an <a href="#tree-inclusive-ancestor">inclusive ancestor</a> of the
 {{NodeIterator/referenceNode}} attribute value, then return.

 <li>
  <p>If the {{NodeIterator/pointerBeforeReferenceNode}} attribute value is true, then:

  <ol>
   <li><p>Let <var>next</var> be <var>toBeRemovedNode</var>'s first <a>following</a>
   <a>node</a> that is an <a>inclusive descendant</a> of <var>nodeIterator</var>'s
   <a for=traversal>root</a> and is not an <a>inclusive descendant</a> of
   <var>toBeRemovedNode</var>, and null if there is no such <a>node</a>.

   <li><p>If <var>next</var> is non-null, then set <var>nodeIterator</var>'s
   {{NodeIterator/referenceNode}} attribute to <var>next</var> and return.

   <li>
    <p>Otherwise, set <var>nodeIterator</var>'s
    {{NodeIterator/pointerBeforeReferenceNode}} attribute to false.

    <p class="note no-backref">Steps are not terminated here.
  </ol>

 <li><p>Set <var>nodeIterator</var>'s {{NodeIterator/referenceNode}} attribute to
 <var>toBeRemovedNode</var>'s <a for=tree>parent</a>, if <var>toBeRemovedNode</var>'s
 <a>previous sibling</a> is null, and to the <a>inclusive descendant</a> of
 <var>toBeRemovedNode</var>'s <a>previous sibling</a> that appears last in <a>tree order</a>
 otherwise.
</ol>

<hr>

<p>The <dfn attribute id="iterator-root" for="iterator"><code>root</code></dfn> attribute must return <a href="#traversal-root">root</a>.</p>

<p>The <dfn><code>referenceNode</code></dfn> and <dfn><code>pointerBeforeReferenceNode</code></dfn> attributes must return what they were initialized to.</p>

<p>The <dfn attribute id="iterator-whattoshow" for="iterator"><code>whatToShow</code></dfn> attribute must return <a href="#traversal-whattoshow">whatToShow</a>.

<p>The <dfn attribute id="iterator-filter" for="iterator"><code>filter</code></dfn> attribute must return <a href="#traversal-filter">filter</a>.

<p>To <dfn attribute id="iterator-traverse" for="iterator">traverse</dfn> in direction <var>direction</var> run these steps:

<ol>
 <li><p>Let <var>node</var> be the value of the <code><a>referenceNode</a></code> attribute.

 <li><p>Let <var>before node</var> be the value of the <code><a>pointerBeforeReferenceNode</a></code> attribute.

 <li>
  <p>Run these substeps:
  <ol>
   <li>
    <dl class="switch">
     <dt>If direction is next</dt>
     <dd>
      <p>If <var>before node</var> is false, let <var>node</var> be the first <a>node</a> <a>following</a> <var>node</var> in the <a>iterator collection</a>. If there is no such <a>node</a> return null.
      <p>If <var>before node</var> is true, set it to false.
     <dt>If direction is previous</dt>
     <dd>
      <p>If <var>before node</var> is true, let <var>node</var>
      be the first <a>node</a> <a>preceding</a> <var>node</var> in the <a>iterator collection</a>. If there is no such <a>node</a> return null.
      <p>If <var>before node</var> is false, set it to true.
    </dl>
   <li><p><a href="#node-filter">Filter</a> <var>node</var> and let <var>result</var> be the return value.
   <li>
    <p>If <var>result</var> is <code><a>FILTER_ACCEPT</a></code>, go to the
    next step in the overall set of steps.
    <p>Otherwise, run these substeps again.
  </ol>
 <li><p>Set the <code><a>referenceNode</a></code> attribute to <var>node</var>, set the <code><a>pointerBeforeReferenceNode</a></code> attribute to <var>before node</var>, and return <var>node</var>.
</ol>

<p>The <dfn id="nodeiterator-nextnode-func" for="nodeiterator"><code>nextNode()</code></dfn> method must <a>traverse</a> in direction next.

<p>The <dfn id="nodeiterator-previousnode-func" for="nodeiterator"><code>previousNode()</code></dfn> method must <a>traverse</a> in direction previous.

<p>The <dfn id="traversal-detach-func" for="traversal"><code>detach()</code></dfn> method must do nothing. <span class="note">Note: Its functionality (disabling a <code><a>NodeIterator</a></code> object) was removed, but the method itself is preserved for compatibility.</span>

<h3 id="traversal-interface-treewalker">Interface <code><a>TreeWalker</a></code></h3>

<pre class='idl'>
[Exposed=Window]
interface TreeWalker {
  [SameObject] readonly attribute Node root;
  readonly attribute unsigned long whatToShow;
  readonly attribute NodeFilter? filter;
           attribute Node currentNode;

  Node? parentNode();
  Node? firstChild();
  Node? lastChild();
  Node? previousSibling();
  Node? nextSibling();
  Node? previousNode();
  Node? nextNode();
};
</pre>

<p class="note">Note: <code><a>TreeWalker</a></code> objects can be created using the <code><a>createTreeWalker()</a></code> method.

<p class="note">Note: As mentioned earlier <code><a>TreeWalker</a></code> objects have an associated <a href="#traversal-root">root</a> <a>node</a>, <a href="#traversal-whattoshow">whatToShow</a> bitmask, and <a href="#traversal-filter">filter</a> callback.

<p>The <dfn id="treewalker-root" for="treeWalker"><code>root</code></dfn> attribute must return <a href="#traversal-root">root</a>.</p>

<p>The <dfn id="dom-treewalker-whattoshow" title="dom-TreeWalker-whatToShow"><code>whatToShow</code></dfn> attribute must return <a href="#traversal-whattoshow" title="concept-traversal-whatToShow">whatToShow</a>.

<p>The <dfn id="treewalker-filter"><code>filter</code></dfn> attribute must return <a href="#traversal-filter">filter</a>.

<p>The <dfn id="treewalker-currentnode"><code>currentNode</code></dfn> attribute must return what it was initialized to.</p>

<p>Setting the <code><a href="#treewalker-currentnode">currentNode</a></code> attribute must set it to the new value.</p>


<p>The <dfn><code>parentNode()</code></dfn> method must run these steps:

<ol>
 <li><p>Let <var>node</var> be the value of the <code><a href="#treewalker-currentnode">currentNode</a></code> attribute.

 <li>
  <p>While <var>node</var> is not null and is not <a href="#traversal-root">root</a>, run these substeps:

  <ol>
   <li><p>Let <var>node</var> be <var>node</var>'s <a>parent</a>.

   <li><p>If <var>node</var> is not null and <a href="#node-filter">filtering</a> <var>node</var> returns <code><a>FILTER_ACCEPT</a></code>, then set the <code><a href="#treewalker-currentnode">currentNode</a></code> attribute to <var>node</var>, return <var>node</var>.
  </ol>

 <li><p>Return null.
</ol>

<p>To <dfn>traverse children</dfn> of type <var>type</var>, run these steps:

<ol>
 <li><p>Let <var>node</var> be the value of the <code><a href="#treewalker-currentnode">currentNode</a></code> attribute.

 <li><p>Set <var>node</var> to <var>node</var>'s <a>first child</a> if <var>type</var> is first, and <var>node</var>'s <a>last child</a> if <var>type</var> is last.

 <li><p>If <var>node</var> is null, return null.

 <li>
  <p><dfn>Main</dfn>: Repeat these substeps:

  <ol>
   <li><p><a href="#node-filter">Filter</a> <var>node</var> and let <var>result</var> be the return value.

   <li><p>If <var>result</var> is <code><a>FILTER_ACCEPT</a></code>, then set the <code><a href="#treewalker-currentnode">currentNode</a></code> attribute to <var>node</var> and return <var>node</var>.

   <li>
    <p>If <var>result</var> is <code><a>FILTER_SKIP</a></code>, run these subsubsteps:

    <ol>
     <li><p>Let <var>child</var> be <var>node</var>'s <a>first child</a> if <var>type</var> is first, and <var>node</var>'s <a>last child</a> if <var>type</var> is last.

     <li><p>If <var>child</var> is not null, set <var>node</var> to <var>child</var> and goto <a>Main</a>.
    </ol>

   <li>
    <p>Repeat these substeps:

    <ol>
     <li><p>Let <var>sibling</var> be <var>node</var>'s <a href="#tree-next-sibling">next sibling</a> if <var>type</var> is first, and <var>node</var>'s <a href="#tree-previous-sibling">previous sibling</a> if <var>type</var> is last.

     <li><p>If <var>sibling</var> is not null, set <var>node</var> to <var>sibling</var> and goto <a>Main</a>.

     <li><p>Let <var>parent</var> be <var>node</var>'s <a>parent</a>.

     <li><p>If <var>parent</var> is null, <var>parent</var> is <a href="#traversal-root">root</a>, or <var>parent</var> is <code><a href="#treewalker-currentnode">currentNode</a></code> attribute's value, return null.

     <li><p>Otherwise, set <var>node</var> to <var>parent</var>.
    </ol>
  </ol>
</ol>

<p>The <dfn><code>firstChild()</code></dfn> method must <a>traverse children</a> of type first.

<p>The <dfn><code>lastChild()</code></dfn> method must <a>traverse children</a> of type last.

<p>To <dfn>traverse siblings</dfn> of type <var>type</var> run these steps:

<ol>
 <li><p>Let <var>node</var> be the value of the <code><a href="#treewalker-currentnode">currentNode</a></code> attribute.

 <li><p>If <var>node</var> is <a href="#traversal-root">root</a>, return null.

 <li>
  <p>Run these substeps:

  <ol>
   <li><p>Let <var>sibling</var> be <var>node</var>'s <a href="#tree-next-sibling">next sibling</a> if <var>type</var> is next, and <var>node</var>'s <a href="#tree-previous-sibling">previous sibling</a> if <var>type</var> is previous.

   <li>
    <p>While <var>sibling</var> is not null, run these subsubsteps:

    <ol>
     <li><p>Set <var>node</var> to <var>sibling</var>.

     <li><p><a href="#node-filter">Filter</a> <var>node</var> and let <var>result</var> be the return value.

     <li><p>If <var>result</var> is <code><a>FILTER_ACCEPT</a></code>, then set the <code><a href="#treewalker-currentnode">currentNode</a></code> attribute to <var>node</var> and return <var>node</var>.

     <li><p>Set <var>sibling</var> to <var>node</var>'s <a>first child</a> if <var>type</var> is next, and <var>node</var>'s <a>last child</a> if <var>type</var> is previous.

     <li><p>If <var>result</var> is <code><a>FILTER_REJECT</a></code> or <var>sibling</var> is null, then set <var>sibling</var> to <var>node</var>'s <a href="#tree-next-sibling">next sibling</a> if <var>type</var> is next, and <var>node</var>'s <a href="#tree-previous-sibling">previous sibling</a> if <var>type</var> is previous.
    </ol>

   <li><p>Set <var>node</var> to its <a>parent</a>.

   <li><p>If <var>node</var> is null or is <a href="#traversal-root">root</a>, return null.

   <li><p><a href="#node-filter">Filter</a> <var>node</var> and if the return value is <code><a>FILTER_ACCEPT</a></code>, then return null.

   <li><p>Run these substeps again.
  </ol>
</ol>

<p>The <dfn><code>nextSibling()</code></dfn> method must <a>traverse siblings</a> of type next.

<p>The <dfn><code>previousSibling()</code></dfn> method must <a>traverse siblings</a> of type previous.

<p>The <dfn id="treewalker-previousnode" for="treewalker"><code>previousNode()</code></dfn> method must run these steps:

<ol>
 <li><p>Let <var>node</var> be the value of the <code><a href="#treewalker-currentnode">currentNode</a></code> attribute.

 <li>
  <p>While <var>node</var> is not <a href="#traversal-root">root</a>, run these substeps:

  <ol>
   <li><p>Let <var>sibling</var> be the <a href="#tree-previous-sibling">previous sibling</a> of <var>node</var>.

   <li>
    <p>While <var>sibling</var> is not null, run these subsubsteps:

    <ol>
     <li><p>Set <var>node</var> to <var>sibling</var>.

     <li><p><a href="#node-filter">Filter</a> <var>node</var> and let <var>result</var> be the return value.

     <li><p>While <var>result</var> is not <code><a>FILTER_REJECT</a></code> and <var>node</var> has a <a>child</a>, set <var>node</var> to its <a>last child</a> and then <a href="#node-filter">filter</a> <var>node</var> and set <var>result</var> to the return value.

     <li><p>If <var>result</var> is <code><a>FILTER_ACCEPT</a></code>, then set the <code><a href="#treewalker-currentnode">currentNode</a></code> attribute to <var>node</var> and return <var>node</var>.

     <li><p>Set <var>sibling</var> to the <a href="#tree-previous-sibling">previous sibling</a> of <var>node</var>.
    </ol>

   <li><p>If <var>node</var> is <a href="#traversal-root">root</a> or <var>node</var>'s <a>parent</a> is null, return null.

   <li><p>Set <var>node</var> to its <a>parent</a>.

   <li><p><a href="#node-filter">Filter</a> <var>node</var> and if the return value is <code><a>FILTER_ACCEPT</a></code>, then set the <code><a href="#treewalker-currentnode">currentNode</a></code> attribute to <var>node</var> and return <var>node</var>.
  </ol>

 <li><p>Return null.
</ol>

<p>The <dfn id="treewalker-nextnode-func" for="treewalker"><code>nextNode()</code></dfn> method must run these steps:

<ol>
 <li><p>Let <var>node</var> be the value of the <code><a href="#treewalker-currentnode">currentNode</a></code> attribute.

 <li><p>Let <var>result</var> be <code><a>FILTER_ACCEPT</a></code>.

 <li>
  <p>Run these substeps:

  <ol>
   <li>
    <p>While <var>result</var> is not <code><a>FILTER_REJECT</a></code> and <var>node</var> has a <a>child</a>, run these subsubsteps:

    <ol>
     <li><p>Set <var>node</var> to its <a>first child</a>.

     <li><p><a href="#node-filter">Filter</a> <var>node</var> and set <var>result</var> to the return value.

     <li><p>If <var>result</var> is <code><a>FILTER_ACCEPT</a></code>, then set the <code><a href="#treewalker-currentnode">currentNode</a></code> attribute to <var>node</var> and return <var>node</var>.
    </ol>

   <li>
    <p>If a <a>node</a> is <a>following</a> <var>node</var> and is not <a>following</a> <a href="#traversal-root">root</a>, set <var>node</var> to the first such <a>node</a>.
    <p>Otherwise, return null.
    <!-- Implemented as iterating over parent/nextSibling -->

   <li><p><a href="#node-filter">Filter</a> <var>node</var> and set <var>result</var> to the return value.

   <li><p>If <var>result</var> is <code><a>FILTER_ACCEPT</a></code>, then set the <code><a href="#treewalker-currentnode">currentNode</a></code> attribute to <var>node</var> and return <var>node</var>.

   <li><p>Run these substeps again.
  </ol>
</ol>

<h3 id="traversal-interface-nodefilter">Interface <code><a>NodeFilter</a></code></h3>

<pre class='idl'>
[Exposed=Window]
callback interface NodeFilter {
  // Constants for acceptNode()
  const unsigned short FILTER_ACCEPT = 1;
  const unsigned short FILTER_REJECT = 2;
  const unsigned short FILTER_SKIP = 3;

  // Constants for whatToShow
  const unsigned long SHOW_ALL = 0xFFFFFFFF;
  const unsigned long SHOW_ELEMENT = 0x1;
  const unsigned long SHOW_ATTRIBUTE = 0x2;
  const unsigned long SHOW_TEXT = 0x4;
  const unsigned long SHOW_CDATA_SECTION = 0x8;
  const unsigned long SHOW_ENTITY_REFERENCE = 0x10; // historical
  const unsigned long SHOW_ENTITY = 0x20; // historical
  const unsigned long SHOW_PROCESSING_INSTRUCTION = 0x40;
  const unsigned long SHOW_COMMENT = 0x80;
  const unsigned long SHOW_DOCUMENT = 0x100;
  const unsigned long SHOW_DOCUMENT_TYPE = 0x200;
  const unsigned long SHOW_DOCUMENT_FRAGMENT = 0x400;
  const unsigned long SHOW_NOTATION = 0x800; // historical

  unsigned short acceptNode(Node node);
};
</pre>

<p><code><a>NodeFilter</a></code> objects can be used as
<a href="#traversal-filter">filter</a> callback and provide
constants for the <a href="#traversal-whattoshow">whatToShow</a>
bitmask.

<p class="note">Note: It is typically implemented as a JavaScript function.

<p>These constants can be used as callback return value:

<ul>
 <li><dfn><code>FILTER_ACCEPT</code></dfn> (1);
 <li><dfn><code>FILTER_REJECT</code></dfn> (2);
 <li><dfn><code>FILTER_SKIP</code></dfn> (3).
</ul>

<p>These constants can be used for the <a href="#traversal-whattoshow">whatToShow</a> bitmask:

<ul>
 <li><dfn><code>SHOW_ALL</code></dfn> (4294967295, FFFFFFFF in hexadecimal);
 <li><dfn><code>SHOW_ELEMENT</code></dfn> (1);
 <li><dfn><code>SHOW_ATTRIBUTE</code></dfn> (2);
 <li><dfn><code>SHOW_TEXT</code></dfn> (4);
 <li><dfn><code>SHOW_CDATA_SECTION</code></dfn> (8);
 <li><dfn><code>SHOW_PROCESSING_INSTRUCTION</code></dfn> (64, 40 in hexadecimal);
 <li><dfn><code>SHOW_COMMENT</code></dfn> (128, 80 in hexadecimal);
 <li><dfn><code>SHOW_DOCUMENT</code></dfn> (256, 100 in hexadecimal);
 <li><dfn><code>SHOW_DOCUMENT_TYPE</code></dfn> (512, 200 in hexadecimal);
 <li><dfn><code>SHOW_DOCUMENT_FRAGMENT</code></dfn> (1024, 400 in hexadecimal).
</ul>

</section>
