<section>
<h2 id="terminology">Terminology</h2>

  The term <dfn lt="context object|context objects">context object</dfn> means the object on which the algorithm, attribute getter, attribute setter, or method being discussed was called. When the <a>context object</a> is unambiguous, the term can be omitted.

<h3 id="terminology-trees">Trees</h3>
<p>A <dfn>tree</dfn> is a finite hierarchical tree structure. In
<dfn>tree order</dfn> is preorder, depth-first
traversal of a <a>tree</a>.
<!-- http://en.wikipedia.org/wiki/Tree_traversal#Depth-first_Traversal -->

<p>An object that <dfn lt="tree participate|tree participates|participate">participates</dfn> in
a <a>tree</a> has a
<dfn lt="tree parent|tree parents|parent|parents">parent</dfn>, which is either another object
or null, and an ordered list of zero or more
<dfn lt="tree child|tree children|child|children">child</dfn> objects. An object <var>A</var> whose
<a>parent</a> is object <var>B</var> is a
<a>child</a> of <var>B</var>.

<p>The <dfn id="tree-root" for="tree">root</dfn> of an object is itself, if its
<a>parent</a> is null, or else it is the
<a href="#tree-root">root</a> of its
<a>parent</a>.

<p>An object <var>A</var> is called a
<dfn lt="tree descendant|tree descendants|descendant|descendants">descendant</dfn> of an object
<var>B</var>, if either <var>A</var> is a
<a>child</a> of <var>B</var> or
<var>A</var> is a <a>child</a> of an
object <var ignore>C</var> that is a
<a>descendant</a> of <var>B</var>.

<p>An
<dfn lt="tree inclusive descendant|tree inclusive descendants|inclusive descendant|inclusive descendants">inclusive descendant</dfn> is
an object or one of its
<a>descendants</a>.

<p>An object <var>A</var> is called an
<dfn lt="tree ancestor|tree ancestors|ancestor|ancestors">ancestor</dfn> of an object <var>B</var> if and only if <var>B</var> is a
<a>descendant</a> of
<var>A</var>.

<p>An <dfn lt="tree inclusive ancestor|tree inclusive ancestors|inclusive ancestor|inclusive ancestors">inclusive ancestor</dfn> is
an object or one of its <a>ancestors</a>.

<p>An object <var>A</var> is called a
<dfn lt="tree sibling|tree siblings|sibling|siblings">sibling</dfn> of an object
<var>B</var>, if and only if <var>B</var> and <var>A</var>
share the same non-null <a>parent</a>.

<p>An object <var>A</var> is
<dfn lt="preceding | precedes">preceding</dfn> an object
<var>B</var> if <var>A</var> and <var>B</var> are in the
same <a>tree</a> and <var>A</var> comes
before <var>B</var> in
<a>tree order</a>.

<p>An object <var>A</var> is
<dfn>following</dfn> an object
<var>B</var> if <var>A</var> and <var>B</var> are in the
same <a>tree</a> and <var>A</var> comes
after <var>B</var> in
<a>tree order</a>.

<p>The <dfn lt="tree first child|first child">first child</dfn> of an object is its first <a>child</a> or null if it has no <a>children</a>.

<p>The <dfn lt="tree last child|last child">last child</dfn> of an object is
its last <a>child</a> or null if it has no <a>children</a>.

<p>The <dfn id="tree-previous-sibling" lt="tree previous sibling|previous sibling" for="tree">previous sibling</dfn> of an object is its first <a>preceding</a> <a>sibling</a> or null if it has no <a>preceding</a> <a>sibling</a>.

<p>The <dfn id="tree-next-sibling" lt="tree next sibling|next sibling" for="tree">next sibling</dfn> of an object is its first <a>following</a> <a>sibling</a> or null if it has no <a>following</a> <a>sibling</a>.

<p>The <dfn lt="tree index|index">index</dfn> of an object is its number of <a>preceding</a> <a>siblings</a>.

<h3 id="terminology-strings">Strings</h3>

<p>Comparing two strings in a <dfn>case-sensitive</dfn> manner means comparing them exactly, code point for code point.

<p>Comparing two strings in a <dfn>ASCII case-insensitive</dfn> manner means comparing them exactly, code point for code point, except that the characters in the range U+0041 to U+005A (i.e. LATIN CAPITAL LETTER A to LATIN CAPITAL LETTER Z), inclusive, and the corresponding characters in the range U+0061 to U+007A (i.e. LATIN SMALL LETTER A to LATIN SMALL LETTER Z), inclusive, are considered to also match.

<p><dfn lt="converted to ascii uppercase|converting a string to ASCII uppercase">Converting a string to ASCII uppercase</dfn> means replacing all characters in the range U+0061 to U+007A (i.e. LATIN SMALL LETTER A to LATIN SMALL LETTER Z), inclusive, with the corresponding characters in the range U+0041 to U+005A (i.e. LATIN CAPITAL LETTER A to LATIN CAPITAL LETTER Z).

<p><dfn lt="converted to ascii lowercase|converting a string to ASCII lowercase">Converting a string to ASCII lowercase</dfn> means replacing all characters in the range U+0041 to U+005A (i.e. LATIN CAPITAL LETTER A to LATIN CAPITAL LETTER Z), inclusive, with the corresponding characters in the range U+0061 to U+007A (i.e. LATIN SMALL LETTER A to LATIN SMALL LETTER Z).

<p>A string <var>pattern</var> is a <dfn>prefix match</dfn> for a string
<var>s</var> when <var>pattern</var> is not longer than
<var>s</var> and truncating <var>s</var> to
<var>pattern</var>'s length leaves the two strings as matches of each
other.

<h3 id="terminology-ordered-sets">Ordered sets</h3>
<p>An <dfn>ordered set</dfn> is a list that it must not contain the same item twice.</p>
<p>The <dfn>ordered set parser</dfn> takes a string <var>input</var> and then runs these steps:</p>
<ol>
  <li>Let <var>position</var> be a pointer into <var>input</var>, initially pointing at the start of the string.</li>

  <li>Let <var>tokens</var> be an ordered set of tokens, initially empty.</li>

  <li><a>Skip ASCII whitespace</a>.</li>

  <li><p>While <var>position</var> is not past the end of <var>input</var>:</p><ol><li><a>Collect a code point sequence</a> of code points that are not <a>ASCII whitespace</a>.</li><li>If the collected string is not in <var>tokens</var>, append the collected string to <var>tokens</var>.</li><li><a>Skip ASCII whitespace</a>. </li></ol></li><li>Return <var>tokens</var>.</li>
</ol>

<p>To <dfn export for="ordered set" id="ordered-set-replace">replace</dfn> within an <a>ordered set</a> <var>set</var>, given <var>item</var> and <var>replacement</var>,
if <var>item</var> or <var>replacement</var> is in <var>set</var>, then replace the first instance of
either with <var>replacement</var> and remove all other instances.

<div class="example">
 <p><a href="#ordered-set-replace">Replacing</a> "a" with "c" within the <a>ordered set</a> « "a", "b", "c" » gives « "c", "b" ».
 Within « "c", "b", "a" » it gives « "c", "b" » as well.
</div>

<p>To <dfn>collect a code point sequence</dfn> of <var>code points</var>, run these steps:</p>
<ol>
  <li>Let <var>input</var> and <var>position</var> be the same variables as those of the same name in the algorithm that invoked these steps.</li>

  <li>Let <var>result</var> be the empty string.</li>

  <li>While <var>position</var> does not point past the end of <var>input</var> and the code point at <var>position</var> is one of <var>code points</var>, append that code point to the end of <var>result</var> and advance <var>position</var> to the next code point in <var>input</var>.</li>

  <li>Return <var>result</var>.</li>
</ol>

<p>To <dfn>skip ASCII whitespace</dfn> means to
<a>collect a code point sequence</a> of
<a>ASCII whitespace</a> and discard the
return value.

<p>The <dfn>ordered set serializer</dfn> takes a
<var>set</var> and returns the concatenation of the strings in
<var>set</var>, separated from each other by U+0020.

<h3 id="terminology-selectors">Selectors</h3>
<!--
To <dfn export>match a relative selectors string</dfn> <var>relativeSelectors</var>
against a <var>set</var>, run these steps:

<ol>
 <li>Let <var>s</var> be the result of
 <a>parse a relative selector</a> from
 <var>relativeSelectors</var> against <var>set</var>.
 [[!SELECTORS4]]

 <li>If <var>s</var> is failure, <a>throw</a> a {{SyntaxError}}.

 <li>Return the result of <a>evaluate a selector</a> <var>s</var>
  using <a>:scope elements</a> <var>set</var>. [[!SELECTORS4]]
</ol>
-->

<p>To <dfn export>scope-match a selectors string</dfn> <var>selectors</var> against a
<var>node</var>, run these steps:

<ol>
 <li>Let <var>s</var> be the result of <a>parse a selector</a> <var>selectors</var>.
 [[!SELECTORS4]]

 <li><p>If <var>s</var> is failure, then <a>throw</a> a {{SyntaxError}}.

 <li><p>Return the result of <a>evaluate a selector</a> <var>s</var> against <var>node</var>'s
 <a for=tree>root</a> using <a>scoping root</a> <var>node</var>. [[!SELECTORS4]].
</ol>

<p class=note>Support for namespaces within selectors is not planned and will not be
added.

<h3 id="terminology-namespaces">Namespaces</h3>

To <dfn export>validate</dfn> a <var>qualifiedName</var>, run these steps:

<ol>
 <li><p>If <var>qualifiedName</var> does not match the <code class="external" data-anolis-spec="xmlns">
 <a type>Name</a></code> production,
 then <a>throw</a> an {{InvalidCharacterError}}.

 <li><p>If <var>qualifiedName</var> does not match the <code class="external" data-anolis-spec="xmlns">
 <a type>QName</a></code> production, then <a>throw</a> a {{NamespaceError}}.
</ol>

To <dfn export>validate and extract</dfn> a <var>namespace</var> and <var>qualifiedName</var>,
run these steps:

<ol>
 <li>If <var>namespace</var> is the empty string, set it to null.

 <li><a>Validate</a> <var>qualifiedName</var>. Rethrow any exceptions.

 <li>Let <var>prefix</var> be null.

 <li>Let <var>localName</var> be <var>qualifiedName</var>.

 <li>If <var>qualifiedName</var> contains a "<code>:</code>" (U+003E), then split the
 string on it and set <var>prefix</var> to the part before and <var>localName</var> to
 the part after.

 <li>If <var>prefix</var> is non-null and <var>namespace</var> is null, then <a>throw</a> a
 {{NamespaceError}}.

 <li>If <var>prefix</var> is "<code>xml</code>" and <var>namespace</var> is not the
 <a>XML namespace</a>, then <a>throw</a> a {{NamespaceError}}.

 <li>If either <var>qualifiedName</var> or <var>prefix</var> is
 "<code>xmlns</code>" and <var>namespace</var> is not the
 <a>XMLNS namespace</a>, then <a>throw</a> a
 {{NamespaceError}}.

 <li>If <var>namespace</var> is the <a>XMLNS namespace</a> and neither <var>qualifiedName</var>
 nor <var>prefix</var> is "<code>xmlns</code>", then <a>throw</a> a {{NamespaceError}}.

 <li>Return <var>namespace</var>, <var>prefix</var>, and <var>localName</var>.
</ol>

The <dfn>HTML namespace</dfn> is
<code>http://www.w3.org/1999/xhtml</code>.

The <dfn>SVG namespace</dfn> is
<code>http://www.w3.org/2000/svg</code>.

The <dfn>XML namespace</dfn> is
<code>http://www.w3.org/XML/1998/namespace</code>.

The <dfn>XMLNS namespace</dfn> is
<code>http://www.w3.org/2000/xmlns/</code>.
</section>
